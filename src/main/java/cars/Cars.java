package cars;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Cars extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002f0604051806060016040528060405180606001604052806040518060400160405280601081526020017f465253565454333245343555313233550000000000000000000000000000000081525081526020016040518060400160405280600681526020017f467261736361000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f566974746f72696f00000000000000000000000000000000000000000000000081525081525081526020016040518061012001604052806040518060400160405280600781526020017f465635343352450000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f414141413132000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f4d6572636564657300000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f436c61737365204100000000000000000000000000000000000000000000000081525081526020016107e181526020016040518060400160405280600681526020017f64696573656c000000000000000000000000000000000000000000000000000081525081526020016106408152602001608281526020016040518060c00160405280609e815260200162005cce609e9139815250815260200160405180606001604052806040518060400160405280601381526020017f706572666574746520636f6e64697a696f6e69000000000000000000000000008152508152602001611388815260200161659081525081525062000d1760201b60201c565b62000571604051806060016040528060405180606001604052806040518060400160405280601081526020017f444c5246524e3637553231533938374c0000000000000000000000000000000081525081526020016040518060400160405280600b81526020017f44656c6c6f20527573736f00000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f4672616e636573636f000000000000000000000000000000000000000000000081525081525081526020016040518061012001604052806040518060400160405280600781526020017f464137363546470000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f424242423132000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4879756e6461690000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f693230000000000000000000000000000000000000000000000000000000000081525081526020016107e181526020016040518060400160405280600781526020017f62656e7a696e6100000000000000000000000000000000000000000000000000815250815260200161044c8152602001604b81526020016040518060a001604052806066815260200162005d6c6066913981525081526020016040518060600160405280604051806080016040528060438152602001620059bb604391398152602001612ee0815260200161232881525081525062000d1760201b60201c565b620007f2604051806060016040528060405180606001604052806040518060400160405280601081526020017f4c4549434852393052383758323334480000000000000000000000000000000081525081526020016040518060400160405280600481526020017f456c69610000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f436869617261000000000000000000000000000000000000000000000000000081525081525081526020016040518061012001604052806040518060400160405280600781526020017f474a36353446560000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f434343433534000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f486f6e646100000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f434852000000000000000000000000000000000000000000000000000000000081525081526020016107df81526020016040518060400160405280600681526020017f64696573656c000000000000000000000000000000000000000000000000000081525081526020016104b08152602001605081526020016040518060c001604052806097815260200162005aea60979139815250815260200160405180606001604052806040518060a001604052806070815260200162005a7a6070913981526020016161a88152602001612ee081525081525062000d1760201b60201c565b62000a8f604051806060016040528060405180606001604052806040518060400160405280601081526020017f4d52524c4653393052383758323334480000000000000000000000000000000081525081526020016040518060400160405280600581526020017f4d6172726100000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f416c666f6e736f0000000000000000000000000000000000000000000000000081525081525081526020016040518061012001604052806040518060400160405280600781526020017f474a3132394a480000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f444444443637000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f416c666120526f6d656f0000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f5374656c76696f0000000000000000000000000000000000000000000000000081525081526020016107e681526020016040518060400160405280600681526020017f64696573656c00000000000000000000000000000000000000000000000000008152508152602001610640815260200160b4815260200160405180610100016040528060d9815260200162005bf560d99139815250815260200160405180606001604052806040518060400160405280601381526020017f706572666574746520636f6e64697a696f6e690000000000000000000000000081525081526020016000815260200161dac081525081525062000d1760201b60201c565b62000d11604051806060016040528060405180606001604052806040518060400160405280601081526020017f43504e46524e3635543534463837364e0000000000000000000000000000000081525081526020016040518060400160405280600681526020017f4361706f6e65000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f4665726e616e646100000000000000000000000000000000000000000000000081525081525081526020016040518061012001604052806040518060400160405280600781526020017f444436353446560000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f474747473132000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f4f70656c0000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f417374726100000000000000000000000000000000000000000000000000000081525081526020016107dc81526020016040518060400160405280600781526020017f62656e7a696e610000000000000000000000000000000000000000000000000081525081526020016104b08152602001605a81526020016040518060a001604052806074815260200162005b8160749139815250815260200160405180606001604052806040518060a00160405280607c8152602001620059fe607c913981526020016201070c8152602001611db081525081525062000d1760201b60201c565b62001283565b6003600081548092919062000d2c9062000edf565b919050555060028190806001815401808255809150506001900390600052602060002090600f0201600090919091909150600082015181600001600082015181600001908162000d7d91906200119c565b50602082015181600101908162000d9591906200119c565b50604082015181600201908162000dad91906200119c565b505050602082015181600301600082015181600001908162000dd091906200119c565b50602082015181600101908162000de891906200119c565b50604082015181600201908162000e0091906200119c565b50606082015181600301908162000e1891906200119c565b506080820151816004015560a082015181600501908162000e3a91906200119c565b5060c0820151816006015560e0820151816007015561010082015181600801908162000e6791906200119c565b505050604082015181600c01600082015181600001908162000e8a91906200119c565b5060208201518160010155604082015181600201555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600062000eec8262000ed5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362000f215762000f2062000ea6565b5b600182019050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000fae57607f821691505b60208210810362000fc45762000fc362000f66565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200102e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000fef565b6200103a868362000fef565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200107d62001077620010718462000ed5565b62001052565b62000ed5565b9050919050565b6000819050919050565b62001099836200105c565b620010b1620010a88262001084565b84845462000ffc565b825550505050565b600090565b620010c8620010b9565b620010d58184846200108e565b505050565b5b81811015620010fd57620010f1600082620010be565b600181019050620010db565b5050565b601f8211156200114c57620011168162000fca565b620011218462000fdf565b8101602085101562001131578190505b62001149620011408562000fdf565b830182620010da565b50505b505050565b600082821c905092915050565b6000620011716000198460080262001151565b1980831691505092915050565b60006200118c83836200115e565b9150826002028217905092915050565b620011a78262000f2c565b67ffffffffffffffff811115620011c357620011c262000f37565b5b620011cf825462000f95565b620011dc82828562001101565b600060209050601f831160018114620012145760008415620011ff578287015190505b6200120b85826200117e565b8655506200127b565b601f198416620012248662000fca565b60005b828110156200124e5784890151825560018201915060208501945060208101905062001227565b868310156200126e57848901516200126a601f8916826200115e565b8355505b6001600288020188555050505b505050505050565b61472880620012936000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063bdfa387a11610066578063bdfa387a1461029a578063c3c70591146102b6578063d01af8bc146102e6578063d547741f14610316576100f5565b80638da5cb5b146101fe57806391d148541461021c5780639f2e32221461024c578063a217fddf1461027c576100f5565b8063248a9ca3116100d3578063248a9ca3146101645780632f2ff15d1461019457806336568abe146101b0578063605feba7146101cc576100f5565b806301ffc9a7146100fa578063084b9f4a1461012a57806315c4121c14610146575b600080fd5b610114600480360381019061010f919061368e565b610332565b60405161012191906136d6565b60405180910390f35b610144600480360381019061013f919061386d565b6103ac565b005b61014e610b86565b60405161015b91906138ff565b60405180910390f35b61017e60048036038101906101799190613950565b610b93565b60405161018b919061398c565b60405180910390f35b6101ae60048036038101906101a99190613a05565b610bb2565b005b6101ca60048036038101906101c59190613a05565b610bd3565b005b6101e660048036038101906101e19190613a45565b610c56565b6040516101f593929190613c96565b60405180910390f35b610206611295565b6040516102139190613cf1565b60405180910390f35b61023660048036038101906102319190613a05565b6112bb565b60405161024391906136d6565b60405180910390f35b61026660048036038101906102619190613a45565b611325565b6040516102739190613d56565b60405180910390f35b6102846119df565b604051610291919061398c565b60405180910390f35b6102b460048036038101906102af9190613d78565b6119e6565b005b6102d060048036038101906102cb9190613a45565b6121c0565b6040516102dd9190613d56565b60405180910390f35b61030060048036038101906102fb9190613a45565b61286a565b60405161030d9190613d56565b60405180910390f35b610330600480360381019061032b9190613a05565b612f81565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103a557506103a482612fa2565b5b9050919050565b6000600285815481106103c2576103c1613e33565b5b90600052602060002090600f0201604051806060016040529081600082016040518060600160405290816000820180546103fb90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461042790613e91565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050815260200160018201805461048d90613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546104b990613e91565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050505050815260200160028201805461051f90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461054b90613e91565b80156105985780601f1061056d57610100808354040283529160200191610598565b820191906000526020600020905b81548152906001019060200180831161057b57829003601f168201915b505050505081525050815260200160038201604051806101200160405290816000820180546105c690613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546105f290613e91565b801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b5050505050815260200160018201805461065890613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461068490613e91565b80156106d15780601f106106a6576101008083540402835291602001916106d1565b820191906000526020600020905b8154815290600101906020018083116106b457829003601f168201915b505050505081526020016002820180546106ea90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461071690613e91565b80156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b5050505050815260200160038201805461077c90613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546107a890613e91565b80156107f55780601f106107ca576101008083540402835291602001916107f5565b820191906000526020600020905b8154815290600101906020018083116107d857829003601f168201915b505050505081526020016004820154815260200160058201805461081890613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461084490613e91565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820180546108be90613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea90613e91565b80156109375780601f1061090c57610100808354040283529160200191610937565b820191906000526020600020905b81548152906001019060200180831161091a57829003601f168201915b5050505050815250508152602001600c820160405180606001604052908160008201805461096490613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461099090613e91565b80156109dd5780601f106109b2576101008083540402835291602001916109dd565b820191906000526020600020905b8154815290600101906020018083116109c057829003601f168201915b5050505050815260200160018201548152602001600282015481525050815250509050600060405180606001604052808681526020018581526020018481525090508082604001819052508160028781548110610a3d57610a3c613e33565b5b90600052602060002090600f02016000820151816000016000820151816000019081610a69919061406e565b506020820151816001019081610a7f919061406e565b506040820151816002019081610a95919061406e565b5050506020820151816003016000820151816000019081610ab6919061406e565b506020820151816001019081610acc919061406e565b506040820151816002019081610ae2919061406e565b506060820151816003019081610af8919061406e565b506080820151816004015560a0820151816005019081610b18919061406e565b5060c0820151816006015560e08201518160070155610100820151816008019081610b43919061406e565b505050604082015181600c016000820151816000019081610b64919061406e565b5060208201518160010155604082015181600201555050905050505050505050565b6000600280549050905090565b6000806000838152602001908152602001600020600101549050919050565b610bbb82610b93565b610bc48161300c565b610bce8383613020565b505050565b610bdb613100565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f906141b2565b60405180910390fd5b610c528282613108565b5050565b60028181548110610c6657600080fd5b90600052602060002090600f020160009150905080600001604051806060016040529081600082018054610c9990613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc590613e91565b8015610d125780601f10610ce757610100808354040283529160200191610d12565b820191906000526020600020905b815481529060010190602001808311610cf557829003601f168201915b50505050508152602001600182018054610d2b90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5790613e91565b8015610da45780601f10610d7957610100808354040283529160200191610da4565b820191906000526020600020905b815481529060010190602001808311610d8757829003601f168201915b50505050508152602001600282018054610dbd90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610de990613e91565b8015610e365780601f10610e0b57610100808354040283529160200191610e36565b820191906000526020600020905b815481529060010190602001808311610e1957829003601f168201915b505050505081525050908060030160405180610120016040529081600082018054610e6090613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8c90613e91565b8015610ed95780601f10610eae57610100808354040283529160200191610ed9565b820191906000526020600020905b815481529060010190602001808311610ebc57829003601f168201915b50505050508152602001600182018054610ef290613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1e90613e91565b8015610f6b5780601f10610f4057610100808354040283529160200191610f6b565b820191906000526020600020905b815481529060010190602001808311610f4e57829003601f168201915b50505050508152602001600282018054610f8490613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb090613e91565b8015610ffd5780601f10610fd257610100808354040283529160200191610ffd565b820191906000526020600020905b815481529060010190602001808311610fe057829003601f168201915b5050505050815260200160038201805461101690613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461104290613e91565b801561108f5780601f106110645761010080835404028352916020019161108f565b820191906000526020600020905b81548152906001019060200180831161107257829003601f168201915b50505050508152602001600482015481526020016005820180546110b290613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546110de90613e91565b801561112b5780601f106111005761010080835404028352916020019161112b565b820191906000526020600020905b81548152906001019060200180831161110e57829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201805461115890613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461118490613e91565b80156111d15780601f106111a6576101008083540402835291602001916111d1565b820191906000526020600020905b8154815290600101906020018083116111b457829003601f168201915b5050505050815250509080600c016040518060600160405290816000820180546111fa90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461122690613e91565b80156112735780601f1061124857610100808354040283529160200191611273565b820191906000526020600020905b81548152906001019060200180831161125657829003601f168201915b5050505050815260200160018201548152602001600282015481525050905083565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060006002838154811061133d5761133c613e33565b5b90600052602060002090600f02016040518060600160405290816000820160405180606001604052908160008201805461137690613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546113a290613e91565b80156113ef5780601f106113c4576101008083540402835291602001916113ef565b820191906000526020600020905b8154815290600101906020018083116113d257829003601f168201915b5050505050815260200160018201805461140890613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461143490613e91565b80156114815780601f1061145657610100808354040283529160200191611481565b820191906000526020600020905b81548152906001019060200180831161146457829003601f168201915b5050505050815260200160028201805461149a90613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546114c690613e91565b80156115135780601f106114e857610100808354040283529160200191611513565b820191906000526020600020905b8154815290600101906020018083116114f657829003601f168201915b5050505050815250508152602001600382016040518061012001604052908160008201805461154190613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461156d90613e91565b80156115ba5780601f1061158f576101008083540402835291602001916115ba565b820191906000526020600020905b81548152906001019060200180831161159d57829003601f168201915b505050505081526020016001820180546115d390613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546115ff90613e91565b801561164c5780601f106116215761010080835404028352916020019161164c565b820191906000526020600020905b81548152906001019060200180831161162f57829003601f168201915b5050505050815260200160028201805461166590613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461169190613e91565b80156116de5780601f106116b3576101008083540402835291602001916116de565b820191906000526020600020905b8154815290600101906020018083116116c157829003601f168201915b505050505081526020016003820180546116f790613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461172390613e91565b80156117705780601f1061174557610100808354040283529160200191611770565b820191906000526020600020905b81548152906001019060200180831161175357829003601f168201915b505050505081526020016004820154815260200160058201805461179390613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546117bf90613e91565b801561180c5780601f106117e15761010080835404028352916020019161180c565b820191906000526020600020905b8154815290600101906020018083116117ef57829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201805461183990613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461186590613e91565b80156118b25780601f10611887576101008083540402835291602001916118b2565b820191906000526020600020905b81548152906001019060200180831161189557829003601f168201915b5050505050815250508152602001600c82016040518060600160405290816000820180546118df90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461190b90613e91565b80156119585780601f1061192d57610100808354040283529160200191611958565b820191906000526020600020905b81548152906001019060200180831161193b57829003601f168201915b5050505050815260200160018201548152602001600282015481525050815250509050600081604001519050600061199382602001516131e9565b905060006119a483604001516131e9565b90506000836000015190508282826040516020016119c49392919061423f565b60405160208183030381529060405295505050505050919050565b6000801b81565b6000600285815481106119fc576119fb613e33565b5b90600052602060002090600f020160405180606001604052908160008201604051806060016040529081600082018054611a3590613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6190613e91565b8015611aae5780601f10611a8357610100808354040283529160200191611aae565b820191906000526020600020905b815481529060010190602001808311611a9157829003601f168201915b50505050508152602001600182018054611ac790613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611af390613e91565b8015611b405780601f10611b1557610100808354040283529160200191611b40565b820191906000526020600020905b815481529060010190602001808311611b2357829003601f168201915b50505050508152602001600282018054611b5990613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8590613e91565b8015611bd25780601f10611ba757610100808354040283529160200191611bd2565b820191906000526020600020905b815481529060010190602001808311611bb557829003601f168201915b50505050508152505081526020016003820160405180610120016040529081600082018054611c0090613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2c90613e91565b8015611c795780601f10611c4e57610100808354040283529160200191611c79565b820191906000526020600020905b815481529060010190602001808311611c5c57829003601f168201915b50505050508152602001600182018054611c9290613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbe90613e91565b8015611d0b5780601f10611ce057610100808354040283529160200191611d0b565b820191906000526020600020905b815481529060010190602001808311611cee57829003601f168201915b50505050508152602001600282018054611d2490613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5090613e91565b8015611d9d5780601f10611d7257610100808354040283529160200191611d9d565b820191906000526020600020905b815481529060010190602001808311611d8057829003601f168201915b50505050508152602001600382018054611db690613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611de290613e91565b8015611e2f5780601f10611e0457610100808354040283529160200191611e2f565b820191906000526020600020905b815481529060010190602001808311611e1257829003601f168201915b5050505050815260200160048201548152602001600582018054611e5290613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7e90613e91565b8015611ecb5780601f10611ea057610100808354040283529160200191611ecb565b820191906000526020600020905b815481529060010190602001808311611eae57829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882018054611ef890613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2490613e91565b8015611f715780601f10611f4657610100808354040283529160200191611f71565b820191906000526020600020905b815481529060010190602001808311611f5457829003601f168201915b5050505050815250508152602001600c8201604051806060016040529081600082018054611f9e90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611fca90613e91565b80156120175780601f10611fec57610100808354040283529160200191612017565b820191906000526020600020905b815481529060010190602001808311611ffa57829003601f168201915b505050505081526020016001820154815260200160028201548152505081525050905060006040518060600160405280868152602001858152602001848152509050808260000181905250816002878154811061207757612076613e33565b5b90600052602060002090600f020160008201518160000160008201518160000190816120a3919061406e565b5060208201518160010190816120b9919061406e565b5060408201518160020190816120cf919061406e565b50505060208201518160030160008201518160000190816120f0919061406e565b506020820151816001019081612106919061406e565b50604082015181600201908161211c919061406e565b506060820151816003019081612132919061406e565b506080820151816004015560a0820151816005019081612152919061406e565b5060c0820151816006015560e0820151816007015561010082015181600801908161217d919061406e565b505050604082015181600c01600082015181600001908161219e919061406e565b5060208201518160010155604082015181600201555050905050505050505050565b60606000600283815481106121d8576121d7613e33565b5b90600052602060002090600f02016040518060600160405290816000820160405180606001604052908160008201805461221190613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461223d90613e91565b801561228a5780601f1061225f5761010080835404028352916020019161228a565b820191906000526020600020905b81548152906001019060200180831161226d57829003601f168201915b505050505081526020016001820180546122a390613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546122cf90613e91565b801561231c5780601f106122f15761010080835404028352916020019161231c565b820191906000526020600020905b8154815290600101906020018083116122ff57829003601f168201915b5050505050815260200160028201805461233590613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461236190613e91565b80156123ae5780601f10612383576101008083540402835291602001916123ae565b820191906000526020600020905b81548152906001019060200180831161239157829003601f168201915b505050505081525050815260200160038201604051806101200160405290816000820180546123dc90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461240890613e91565b80156124555780601f1061242a57610100808354040283529160200191612455565b820191906000526020600020905b81548152906001019060200180831161243857829003601f168201915b5050505050815260200160018201805461246e90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461249a90613e91565b80156124e75780601f106124bc576101008083540402835291602001916124e7565b820191906000526020600020905b8154815290600101906020018083116124ca57829003601f168201915b5050505050815260200160028201805461250090613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461252c90613e91565b80156125795780601f1061254e57610100808354040283529160200191612579565b820191906000526020600020905b81548152906001019060200180831161255c57829003601f168201915b5050505050815260200160038201805461259290613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546125be90613e91565b801561260b5780601f106125e05761010080835404028352916020019161260b565b820191906000526020600020905b8154815290600101906020018083116125ee57829003601f168201915b505050505081526020016004820154815260200160058201805461262e90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461265a90613e91565b80156126a75780601f1061267c576101008083540402835291602001916126a7565b820191906000526020600020905b81548152906001019060200180831161268a57829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820180546126d490613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461270090613e91565b801561274d5780601f106127225761010080835404028352916020019161274d565b820191906000526020600020905b81548152906001019060200180831161273057829003601f168201915b5050505050815250508152602001600c820160405180606001604052908160008201805461277a90613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546127a690613e91565b80156127f35780601f106127c8576101008083540402835291602001916127f3565b820191906000526020600020905b8154815290600101906020018083116127d657829003601f168201915b505050505081526020016001820154815260200160028201548152505081525050905060008160000151905060008160000151905060008260200151905060008360400151905082828260405160200161284f9392919061423f565b60405160208183030381529060405295505050505050919050565b606060006002838154811061288257612881613e33565b5b90600052602060002090600f0201604051806060016040529081600082016040518060600160405290816000820180546128bb90613e91565b80601f01602080910402602001604051908101604052809291908181526020018280546128e790613e91565b80156129345780601f1061290957610100808354040283529160200191612934565b820191906000526020600020905b81548152906001019060200180831161291757829003601f168201915b5050505050815260200160018201805461294d90613e91565b80601f016020809104026020016040519081016040528092919081815260200182805461297990613e91565b80156129c65780601f1061299b576101008083540402835291602001916129c6565b820191906000526020600020905b8154815290600101906020018083116129a957829003601f168201915b505050505081526020016002820180546129df90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612a0b90613e91565b8015612a585780601f10612a2d57610100808354040283529160200191612a58565b820191906000526020600020905b815481529060010190602001808311612a3b57829003601f168201915b50505050508152505081526020016003820160405180610120016040529081600082018054612a8690613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612ab290613e91565b8015612aff5780601f10612ad457610100808354040283529160200191612aff565b820191906000526020600020905b815481529060010190602001808311612ae257829003601f168201915b50505050508152602001600182018054612b1890613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612b4490613e91565b8015612b915780601f10612b6657610100808354040283529160200191612b91565b820191906000526020600020905b815481529060010190602001808311612b7457829003601f168201915b50505050508152602001600282018054612baa90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612bd690613e91565b8015612c235780601f10612bf857610100808354040283529160200191612c23565b820191906000526020600020905b815481529060010190602001808311612c0657829003601f168201915b50505050508152602001600382018054612c3c90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612c6890613e91565b8015612cb55780601f10612c8a57610100808354040283529160200191612cb5565b820191906000526020600020905b815481529060010190602001808311612c9857829003601f168201915b5050505050815260200160048201548152602001600582018054612cd890613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612d0490613e91565b8015612d515780601f10612d2657610100808354040283529160200191612d51565b820191906000526020600020905b815481529060010190602001808311612d3457829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882018054612d7e90613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612daa90613e91565b8015612df75780601f10612dcc57610100808354040283529160200191612df7565b820191906000526020600020905b815481529060010190602001808311612dda57829003601f168201915b5050505050815250508152602001600c8201604051806060016040529081600082018054612e2490613e91565b80601f0160208091040260200160405190810160405280929190818152602001828054612e5090613e91565b8015612e9d5780601f10612e7257610100808354040283529160200191612e9d565b820191906000526020600020905b815481529060010190602001808311612e8057829003601f168201915b50505050508152602001600182015481526020016002820154815250508152505090506000816020015190506000816000015190506000826020015190506000836040015190506000846060015190506000612f008760200151608001516131e9565b905060008660a0015190506000612f1e896020015160c001516131e9565b90506000612f338a6020015160e001516131e9565b905060008961010001519050888888888888888888604051602001612f609998979695949392919061428e565b6040516020818303038152906040529b505050505050505050505050919050565b612f8a82610b93565b612f938161300c565b612f9d8383613108565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61301d81613018613100565b613349565b50565b61302a82826112bb565b6130fc57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506130a1613100565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61311282826112bb565b156131e557600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061318a613100565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b606060008203613230576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613344565b600082905060005b6000821461326257808061324b906143b4565b915050600a8261325b919061442b565b9150613238565b60008167ffffffffffffffff81111561327e5761327d613742565b5b6040519080825280601f01601f1916602001820160405280156132b05781602001600182028036833780820191505090505b5090505b6000851461333d576001826132c9919061445c565b9150600a856132d89190614490565b60306132e491906144c1565b60f81b8183815181106132fa576132f9613e33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85613336919061442b565b94506132b4565b8093505050505b919050565b61335382826112bb565b6133e2576133788173ffffffffffffffffffffffffffffffffffffffff1660146133e6565b6133868360001c60206133e6565b6040516020016133979291906145c9565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133d99190613d56565b60405180910390fd5b5050565b6060600060028360026133f99190614603565b61340391906144c1565b67ffffffffffffffff81111561341c5761341b613742565b5b6040519080825280601f01601f19166020018201604052801561344e5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061348657613485613e33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106134ea576134e9613e33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261352a9190614603565b61353491906144c1565b90505b60018111156135d4577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061357657613575613e33565b5b1a60f81b82828151811061358d5761358c613e33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806135cd9061465d565b9050613537565b5060008414613618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360f906146d2565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61366b81613636565b811461367657600080fd5b50565b60008135905061368881613662565b92915050565b6000602082840312156136a4576136a361362c565b5b60006136b284828501613679565b91505092915050565b60008115159050919050565b6136d0816136bb565b82525050565b60006020820190506136eb60008301846136c7565b92915050565b6000819050919050565b613704816136f1565b811461370f57600080fd5b50565b600081359050613721816136fb565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61377a82613731565b810181811067ffffffffffffffff8211171561379957613798613742565b5b80604052505050565b60006137ac613622565b90506137b88282613771565b919050565b600067ffffffffffffffff8211156137d8576137d7613742565b5b6137e182613731565b9050602081019050919050565b82818337600083830152505050565b600061381061380b846137bd565b6137a2565b90508281526020810184848401111561382c5761382b61372c565b5b6138378482856137ee565b509392505050565b600082601f83011261385457613853613727565b5b81356138648482602086016137fd565b91505092915050565b600080600080608085870312156138875761388661362c565b5b600061389587828801613712565b945050602085013567ffffffffffffffff8111156138b6576138b5613631565b5b6138c28782880161383f565b93505060406138d387828801613712565b92505060606138e487828801613712565b91505092959194509250565b6138f9816136f1565b82525050565b600060208201905061391460008301846138f0565b92915050565b6000819050919050565b61392d8161391a565b811461393857600080fd5b50565b60008135905061394a81613924565b92915050565b6000602082840312156139665761396561362c565b5b60006139748482850161393b565b91505092915050565b6139868161391a565b82525050565b60006020820190506139a1600083018461397d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139d2826139a7565b9050919050565b6139e2816139c7565b81146139ed57600080fd5b50565b6000813590506139ff816139d9565b92915050565b60008060408385031215613a1c57613a1b61362c565b5b6000613a2a8582860161393b565b9250506020613a3b858286016139f0565b9150509250929050565b600060208284031215613a5b57613a5a61362c565b5b6000613a6984828501613712565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613aac578082015181840152602081019050613a91565b60008484015250505050565b6000613ac382613a72565b613acd8185613a7d565b9350613add818560208601613a8e565b613ae681613731565b840191505092915050565b60006060830160008301518482036000860152613b0e8282613ab8565b91505060208301518482036020860152613b288282613ab8565b91505060408301518482036040860152613b428282613ab8565b9150508091505092915050565b613b58816136f1565b82525050565b6000610120830160008301518482036000860152613b7c8282613ab8565b91505060208301518482036020860152613b968282613ab8565b91505060408301518482036040860152613bb08282613ab8565b91505060608301518482036060860152613bca8282613ab8565b9150506080830151613bdf6080860182613b4f565b5060a083015184820360a0860152613bf78282613ab8565b91505060c0830151613c0c60c0860182613b4f565b5060e0830151613c1f60e0860182613b4f565b50610100830151848203610100860152613c398282613ab8565b9150508091505092915050565b60006060830160008301518482036000860152613c638282613ab8565b9150506020830151613c786020860182613b4f565b506040830151613c8b6040860182613b4f565b508091505092915050565b60006060820190508181036000830152613cb08186613af1565b90508181036020830152613cc48185613b5e565b90508181036040830152613cd88184613c46565b9050949350505050565b613ceb816139c7565b82525050565b6000602082019050613d066000830184613ce2565b92915050565b600082825260208201905092915050565b6000613d2882613a72565b613d328185613d0c565b9350613d42818560208601613a8e565b613d4b81613731565b840191505092915050565b60006020820190508181036000830152613d708184613d1d565b905092915050565b60008060008060808587031215613d9257613d9161362c565b5b6000613da087828801613712565b945050602085013567ffffffffffffffff811115613dc157613dc0613631565b5b613dcd8782880161383f565b935050604085013567ffffffffffffffff811115613dee57613ded613631565b5b613dfa8782880161383f565b925050606085013567ffffffffffffffff811115613e1b57613e1a613631565b5b613e278782880161383f565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ea957607f821691505b602082108103613ebc57613ebb613e62565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613f247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613ee7565b613f2e8683613ee7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613f6b613f66613f61846136f1565b613f46565b6136f1565b9050919050565b6000819050919050565b613f8583613f50565b613f99613f9182613f72565b848454613ef4565b825550505050565b600090565b613fae613fa1565b613fb9818484613f7c565b505050565b5b81811015613fdd57613fd2600082613fa6565b600181019050613fbf565b5050565b601f82111561402257613ff381613ec2565b613ffc84613ed7565b8101602085101561400b578190505b61401f61401785613ed7565b830182613fbe565b50505b505050565b600082821c905092915050565b600061404560001984600802614027565b1980831691505092915050565b600061405e8383614034565b9150826002028217905092915050565b61407782613a72565b67ffffffffffffffff8111156140905761408f613742565b5b61409a8254613e91565b6140a5828285613fe1565b600060209050601f8311600181146140d857600084156140c6578287015190505b6140d08582614052565b865550614138565b601f1984166140e686613ec2565b60005b8281101561410e578489015182556001820191506020850194506020810190506140e9565b8683101561412b5784890151614127601f891682614034565b8355505b6001600288020188555050505b505050505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061419c602f83613d0c565b91506141a782614140565b604082019050919050565b600060208201905081810360008301526141cb8161418f565b9050919050565b600081519050919050565b600081905092915050565b60006141f3826141d2565b6141fd81856141dd565b935061420d818560208601613a8e565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b600061424b82866141e8565b915061425682614219565b60018201915061426682856141e8565b915061427182614219565b60018201915061428182846141e8565b9150819050949350505050565b600061429a828c6141e8565b91506142a582614219565b6001820191506142b5828b6141e8565b91506142c082614219565b6001820191506142d0828a6141e8565b91506142db82614219565b6001820191506142eb82896141e8565b91506142f682614219565b60018201915061430682886141e8565b915061431182614219565b60018201915061432182876141e8565b915061432c82614219565b60018201915061433c82866141e8565b915061434782614219565b60018201915061435782856141e8565b915061436282614219565b60018201915061437282846141e8565b91508190509a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143bf826136f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036143f1576143f0614385565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614436826136f1565b9150614441836136f1565b925082614451576144506143fc565b5b828204905092915050565b6000614467826136f1565b9150614472836136f1565b925082820390508181111561448a57614489614385565b5b92915050565b600061449b826136f1565b91506144a6836136f1565b9250826144b6576144b56143fc565b5b828206905092915050565b60006144cc826136f1565b91506144d7836136f1565b92508282019050808211156144ef576144ee614385565b5b92915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006145366017836144f5565b915061454182614500565b601782019050919050565b600061455782613a72565b61456181856144f5565b9350614571818560208601613a8e565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006145b36011836144f5565b91506145be8261457d565b601182019050919050565b60006145d482614529565b91506145e0828561454c565b91506145eb826145a6565b91506145f7828461454c565b91508190509392505050565b600061460e826136f1565b9150614619836136f1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561465257614651614385565b5b828202905092915050565b6000614668826136f1565b91506000820361467b5761467a614385565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006146bc602083613d0c565b91506146c782614686565b602082019050919050565b600060208201905081810360008301526146eb816146af565b905091905056fea26469706673582212209d916b5f3520f46e4a9ab4007e1278199be420a3c083983753db4d056160b46564736f6c634300081000336772616666696f206669616e6361746120616e746572696f7265206c61746f207061737365676765726f2c6566666574747561746f2063616d62696f206d6f746f7265696e636964656e746174612c6772616666696f206669616e6361746120616e746572696f72652c736f73746974757a696f6e6520706172617572746920706f73746572696f72652c6566666574747561746f2063616d62696f206d61726d697474612c6566666574747561746f2063616d62696f20766f6c616e7465736f73746974757a696f6e6520706172617572746920706f73746572696f72652c6566666574747561746f2063616d62696f206d61726d697474612c677261666669206669616e63617465206c61746572616c69206c61746f206775696461746f72652065207061737365676765726f3320706f7274652c636f6c6f726520626c75206d6574616c6c697a7a61746f2c63616d62696f206175746f6d617469636f2c7472617a696f6e6520616e746572696f72652c6172696120636f6e64697a696f6e6174612c2066696e65737472696e6920656c657474726963692c20736564696c6920656c657474726963692c2066617269204c45442c746574746f206170726962696c653320706f7274652c636f6c6f7265207665726465206d6574616c6c697a7a61746f2c63616d62696f206d616e75616c652c7472617a696f6e6520616e746572696f72652c6172696120636f6e64697a696f6e6174612c2066696e65737472696e6920656c657474726963692c66617269204c45443520706f7274652c636f6c6f726520726f73736f206d6574616c697a7a61746f2c63616d62696f206175746f6d617469636f2c7472617a696f6e6520616e746572696f72652c6172696120636f6e64697a696f6e6174612c66696e65737472696e6920656c657474726963692c736564696c6920656c6574747269636920652072697363616c646174692c76616e6f20706f72746162616761676c69206175746f6d617469636f2c66617269204c45442c746574746f206170726962696c652c616c6c657374696d656e746f20717561647269666f676c696f3520706f7274652c636f6c6f72652067726967696f20736375726f206d6574616c6c697a61746f2c63616d62696f206175746f6d617469636f2c7472617a696f6e6520616e746572696f7265206172696120636f6e64697a696f6e6174612c746574746f206170726962696c652c66696e65737472696e6920656c657474726963692c66617269204c45442c2070616363686574746f207072656d69756d3520706f7274652c20636f6c6f7265206e65726f2c63616d62696f206d616e75616c652c7472617a696f6e6520616e746572696f72652c6172696120636f6e64697a696f6e6174612c66696e65737472696e6920656c657474726963692c66617269204c4544";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_CARSMAP = "carsMap";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SETCAROWNER = "setCarOwner";

    public static final String FUNC_SETSTATECAR = "setStateCar";

    public static final String FUNC_GETCAROWNER = "getCarOwner";

    public static final String FUNC_GETCARSTATE = "getCarState";

    public static final String FUNC_GETCARINFO = "getCarInfo";

    public static final String FUNC_GETNCARS = "getNCars";

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xe20B1196055e8bc7Ab1aA8C86ac929767E6d431a");
    }

    @Deprecated
    protected Cars(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Cars(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Cars(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Cars(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Tuple3<CarOwner, CarInfo, CarState>> carsMap(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CARSMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<CarOwner>() {}, new TypeReference<CarInfo>() {}, new TypeReference<CarState>() {}));
        return new RemoteFunctionCall<Tuple3<CarOwner, CarInfo, CarState>>(function,
                new Callable<Tuple3<CarOwner, CarInfo, CarState>>() {
                    @Override
                    public Tuple3<CarOwner, CarInfo, CarState> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<CarOwner, CarInfo, CarState>(
                                (CarOwner) results.get(0), 
                                (CarInfo) results.get(1), 
                                (CarState) results.get(2));
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setCarOwner(BigInteger idCar, String codiceFiscale, String cognome, String nome) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCAROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(idCar), 
                new org.web3j.abi.datatypes.Utf8String(codiceFiscale), 
                new org.web3j.abi.datatypes.Utf8String(cognome), 
                new org.web3j.abi.datatypes.Utf8String(nome)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setStateCar(BigInteger idCar, String statoAuto, BigInteger km, BigInteger valore) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSTATECAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(idCar), 
                new org.web3j.abi.datatypes.Utf8String(statoAuto), 
                new org.web3j.abi.datatypes.generated.Uint256(km), 
                new org.web3j.abi.datatypes.generated.Uint256(valore)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getCarOwner(BigInteger idCar) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCAROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(idCar)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getCarState(BigInteger idCar) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCARSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(idCar)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getCarInfo(BigInteger idCar) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCARINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(idCar)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getNCars() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNCARS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Cars load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Cars(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Cars load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Cars(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Cars load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Cars(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Cars load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Cars(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Cars> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Cars.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Cars> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Cars.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Cars> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Cars.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Cars> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Cars.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class CarOwner extends DynamicStruct {
        public String codiceFiscale;

        public String cognome;

        public String nome;

        public CarOwner(String codiceFiscale, String cognome, String nome) {
            super(new org.web3j.abi.datatypes.Utf8String(codiceFiscale),new org.web3j.abi.datatypes.Utf8String(cognome),new org.web3j.abi.datatypes.Utf8String(nome));
            this.codiceFiscale = codiceFiscale;
            this.cognome = cognome;
            this.nome = nome;
        }

        public CarOwner(Utf8String codiceFiscale, Utf8String cognome, Utf8String nome) {
            super(codiceFiscale,cognome,nome);
            this.codiceFiscale = codiceFiscale.getValue();
            this.cognome = cognome.getValue();
            this.nome = nome.getValue();
        }
    }

    public static class CarInfo extends DynamicStruct {
        public String targa;

        public String numeroDiTelaio;

        public String marca;

        public String modello;

        public BigInteger anno;

        public String alimentazione;

        public BigInteger cilindrata;

        public BigInteger potenza;

        public String optional;

        public CarInfo(String targa, String numeroDiTelaio, String marca, String modello, BigInteger anno, String alimentazione, BigInteger cilindrata, BigInteger potenza, String optional) {
            super(new org.web3j.abi.datatypes.Utf8String(targa),new org.web3j.abi.datatypes.Utf8String(numeroDiTelaio),new org.web3j.abi.datatypes.Utf8String(marca),new org.web3j.abi.datatypes.Utf8String(modello),new org.web3j.abi.datatypes.generated.Uint256(anno),new org.web3j.abi.datatypes.Utf8String(alimentazione),new org.web3j.abi.datatypes.generated.Uint256(cilindrata),new org.web3j.abi.datatypes.generated.Uint256(potenza),new org.web3j.abi.datatypes.Utf8String(optional));
            this.targa = targa;
            this.numeroDiTelaio = numeroDiTelaio;
            this.marca = marca;
            this.modello = modello;
            this.anno = anno;
            this.alimentazione = alimentazione;
            this.cilindrata = cilindrata;
            this.potenza = potenza;
            this.optional = optional;
        }

        public CarInfo(Utf8String targa, Utf8String numeroDiTelaio, Utf8String marca, Utf8String modello, Uint256 anno, Utf8String alimentazione, Uint256 cilindrata, Uint256 potenza, Utf8String optional) {
            super(targa,numeroDiTelaio,marca,modello,anno,alimentazione,cilindrata,potenza,optional);
            this.targa = targa.getValue();
            this.numeroDiTelaio = numeroDiTelaio.getValue();
            this.marca = marca.getValue();
            this.modello = modello.getValue();
            this.anno = anno.getValue();
            this.alimentazione = alimentazione.getValue();
            this.cilindrata = cilindrata.getValue();
            this.potenza = potenza.getValue();
            this.optional = optional.getValue();
        }
    }

    public static class CarState extends DynamicStruct {
        public String statoAuto;

        public BigInteger km;

        public BigInteger valore;

        public CarState(String statoAuto, BigInteger km, BigInteger valore) {
            super(new org.web3j.abi.datatypes.Utf8String(statoAuto),new org.web3j.abi.datatypes.generated.Uint256(km),new org.web3j.abi.datatypes.generated.Uint256(valore));
            this.statoAuto = statoAuto;
            this.km = km;
            this.valore = valore;
        }

        public CarState(Utf8String statoAuto, Uint256 km, Uint256 valore) {
            super(statoAuto,km,valore);
            this.statoAuto = statoAuto.getValue();
            this.km = km.getValue();
            this.valore = valore.getValue();
        }
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }
}
